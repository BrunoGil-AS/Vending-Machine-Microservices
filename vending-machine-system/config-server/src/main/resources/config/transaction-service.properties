# Transaction Service Configuration

# Service Information
spring.application.name=transaction-service
server.port=8083

# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/vending_transaction
spring.datasource.username=service_transaction
spring.datasource.password=securePassword123
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Eureka Client Configuration
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.instance.prefer-ip-address=true
eureka.instance.lease-renewal-interval-in-seconds=30

# Kafka Configuration
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=transaction-service-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Transaction Service Specific
transaction.timeout.seconds=300
transaction.retry.max-attempts=3
transaction.retry.backoff.milliseconds=1000

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.metrics.tags.application=${spring.application.name}

# Logging Configuration
logging.level.com.vendingmachine.transaction=DEBUG
logging.level.org.springframework.kafka=INFO
logging.level.org.apache.kafka=WARN
logging.level.org.hibernate=OFF
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.file.name=logs/transaction-service.log

# Service URLs
services.inventory.url=http://localhost:8081
services.payment.url=http://localhost:8082
services.dispensing.url=http://localhost:8084

# Resilience4j Circuit Breaker Configuration
# Inventory Service Circuit Breaker
resilience4j.circuitbreaker.instances.inventory-service.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory-service.slidingWindowSize=10
resilience4j.circuitbreaker.instances.inventory-service.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory-service.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.inventory-service.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.inventory-service.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory-service.slowCallRateThreshold=100
resilience4j.circuitbreaker.instances.inventory-service.slowCallDurationThreshold=2s

# Payment Service Circuit Breaker
resilience4j.circuitbreaker.instances.payment-service.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.payment-service.slidingWindowSize=10
resilience4j.circuitbreaker.instances.payment-service.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.payment-service.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.payment-service.waitDurationInOpenState=15s
resilience4j.circuitbreaker.instances.payment-service.failureRateThreshold=50
resilience4j.circuitbreaker.instances.payment-service.slowCallRateThreshold=100
resilience4j.circuitbreaker.instances.payment-service.slowCallDurationThreshold=3s

# Dispensing Service Circuit Breaker
resilience4j.circuitbreaker.instances.dispensing-service.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.dispensing-service.slidingWindowSize=10
resilience4j.circuitbreaker.instances.dispensing-service.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.dispensing-service.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.dispensing-service.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.dispensing-service.failureRateThreshold=50
resilience4j.circuitbreaker.instances.dispensing-service.slowCallRateThreshold=100
resilience4j.circuitbreaker.instances.dispensing-service.slowCallDurationThreshold=2s

# Resilience4j Retry Configuration
# Inventory Service Retry
resilience4j.retry.instances.inventory-service.maxAttempts=3
resilience4j.retry.instances.inventory-service.waitDuration=500ms
resilience4j.retry.instances.inventory-service.exponentialBackoffMultiplier=2
resilience4j.retry.instances.inventory-service.retryExceptions=org.springframework.web.client.ResourceAccessException,java.net.ConnectException

# Payment Service Retry
resilience4j.retry.instances.payment-service.maxAttempts=3
resilience4j.retry.instances.payment-service.waitDuration=500ms
resilience4j.retry.instances.payment-service.exponentialBackoffMultiplier=2
resilience4j.retry.instances.payment-service.retryExceptions=org.springframework.web.client.ResourceAccessException,java.net.ConnectException

# Dispensing Service Retry
resilience4j.retry.instances.dispensing-service.maxAttempts=2
resilience4j.retry.instances.dispensing-service.waitDuration=500ms
resilience4j.retry.instances.dispensing-service.exponentialBackoffMultiplier=2
resilience4j.retry.instances.dispensing-service.retryExceptions=org.springframework.web.client.ResourceAccessException,java.net.ConnectException